
uarttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000768  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016f  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fa  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c8  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c0  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea eb       	ldi	r30, 0xBA	; 186
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include<math.h>
#include <avr/pgmspace.h>
void main (void)
{
  uint8_t x=0;
  DDRA=0XFF;DDRC=0XFF;DDRE=0xff;PORTC=0xff
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	81 b9       	out	0x01, r24	; 1
 12e:	87 b9       	out	0x07, r24	; 7
 130:	8d b9       	out	0x0d, r24	; 13
 132:	88 b9       	out	0x08, r24	; 8
   PORTE=0XFF;
 134:	8e b9       	out	0x0e, r24	; 14
  

   
   UBRR2=95;                         //baud RATE 9600
 136:	8f e5       	ldi	r24, 0x5F	; 95
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 d5 00 	sts	0x00D5, r25
 13e:	80 93 d4 00 	sts	0x00D4, r24
   UCSR2C=0B00000110;
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 d2 00 	sts	0x00D2, r24
    if(UCSR2A & (1<<RXC2))          //check if RXC0 flag is set, clear before enabling RXIE0
 148:	80 91 d0 00 	lds	r24, 0x00D0
 14c:	87 ff       	sbrs	r24, 7
 14e:	05 c0       	rjmp	.+10     	; 0x15a <main+0x30>
      UCSR2A&=(1<<RXC2);   
 150:	80 91 d0 00 	lds	r24, 0x00D0
 154:	80 78       	andi	r24, 0x80	; 128
 156:	80 93 d0 00 	sts	0x00D0, r24
   UCSR2B=0B00011000;	             //Enable transmitter and reciever and also enable recieve interrupt  
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	80 93 d1 00 	sts	0x00D1, r24
 160:	80 e2       	ldi	r24, 0x20	; 32
 162:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 164:	20 e7       	ldi	r18, 0x70	; 112
 166:	31 e0       	ldi	r19, 0x01	; 1
 168:	f9 01       	movw	r30, r18
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 170:	d9 f7       	brne	.-10     	; 0x168 <main+0x3e>
   _delay_ms(2000);
    
   UDR2='U';   
 172:	85 e5       	ldi	r24, 0x55	; 85
 174:	80 93 d6 00 	sts	0x00D6, r24
 178:	20 e0       	ldi	r18, 0x00	; 0
	 } 
if(x=='k')
while(1)
{}
x=UDR2;
  PORTA=0XF0;
 17a:	70 ef       	ldi	r23, 0xF0	; 240
 17c:	40 e7       	ldi	r20, 0x70	; 112
 17e:	51 e0       	ldi	r21, 0x01	; 1
//  PORTA=0X0f;
  _delay_ms(300);
while(!(UCSR2A&(1<<UDRE2)))
      {}

      UDR2='U';
 180:	65 e5       	ldi	r22, 0x55	; 85
  PORTA=0X0F;
 182:	3f e0       	ldi	r19, 0x0F	; 15



while(1)
 {
   while(!(UCSR2A&(1<<RXC2)))
 184:	80 91 d0 00 	lds	r24, 0x00D0
 188:	87 ff       	sbrs	r24, 7
 18a:	fc cf       	rjmp	.-8      	; 0x184 <main+0x5a>
     {
	 // PORTE=0xff;
	 } 
if(x=='k')
 18c:	2b 36       	cpi	r18, 0x6B	; 107
 18e:	09 f4       	brne	.+2      	; 0x192 <main+0x68>
 190:	ff cf       	rjmp	.-2      	; 0x190 <main+0x66>
while(1)
{}
x=UDR2;
 192:	20 91 d6 00 	lds	r18, 0x00D6
  PORTA=0XF0;
 196:	72 b9       	out	0x02, r23	; 2
 198:	88 eb       	ldi	r24, 0xB8	; 184
 19a:	9b e0       	ldi	r25, 0x0B	; 11
 19c:	fa 01       	movw	r30, r20
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a4:	d9 f7       	brne	.-10     	; 0x19c <main+0x72>
//  PORTA=0X0f;
  _delay_ms(300);
while(!(UCSR2A&(1<<UDRE2)))
 1a6:	80 91 d0 00 	lds	r24, 0x00D0
 1aa:	85 ff       	sbrs	r24, 5
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <main+0x7c>
      {}

      UDR2='U';
 1ae:	60 93 d6 00 	sts	0x00D6, r22
  PORTA=0X0F;
 1b2:	32 b9       	out	0x02, r19	; 2
 1b4:	e7 cf       	rjmp	.-50     	; 0x184 <main+0x5a>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
